// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.Infrastructure.DbContext;

#nullable disable

namespace School.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    partial class SchoolDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("School.Domain.Entities.AccountClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountClaims");
                });

            modelBuilder.Entity("School.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "School.Domain.Entities.Class.Description#Text", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("StudentCapacity", "School.Domain.Entities.Class.StudentCapacity#StudentCapacity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("School.Domain.Entities.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("ClassRoom", "School.Domain.Entities.Lecture.ClassRoom#ClassRoom", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Description", "School.Domain.Entities.Lecture.Description#Text", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("LectureDate", "School.Domain.Entities.Lecture.LectureDate#LectureDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TimePeriod", "School.Domain.Entities.Lecture.TimePeriod#TimePeriod", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("time");

                            b1.Property<TimeOnly>("From")
                                .HasColumnType("time");

                            b1.Property<TimeOnly>("To")
                                .HasColumnType("time");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "School.Domain.Entities.Lecture.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("School.Domain.Entities.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("School")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("EducationRange", "School.Domain.Entities.Semester.EducationRange#EducationRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("End")
                                .HasColumnType("date");

                            b1.Property<DateOnly>("Start")
                                .HasColumnType("date");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "School.Domain.Entities.Semester.Name#SemesterName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("SemesterNumber", "School.Domain.Entities.Semester.SemesterNumber#SemesterNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("School.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "School.Domain.Entities.Subject.Description#SubjectDescription", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "School.Domain.Entities.Subject.Name#SubjectName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("School.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassIdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassIdTeacher")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LectureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "School.Domain.Entities.User.Email#UserEmail", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Firstname", "School.Domain.Entities.User.Firstname#UserFirstname", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Lastname", "School.Domain.Entities.User.Lastname#UserLastname", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PasswordHash", "School.Domain.Entities.User.PasswordHash#PasswordHash", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ClassIdStudent");

                    b.HasIndex("ClassIdTeacher");

                    b.HasIndex("LectureId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SemesterUser", b =>
                {
                    b.Property<Guid>("SemesterResponsiblesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SemestersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SemesterResponsiblesId", "SemestersId");

                    b.HasIndex("SemestersId");

                    b.ToTable("SemesterUser");
                });

            modelBuilder.Entity("School.Domain.Entities.AccountClaim", b =>
                {
                    b.HasOne("School.Domain.Entities.User", null)
                        .WithMany("AccountClaims")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("School.Domain.Entities.Class", b =>
                {
                    b.HasOne("School.Domain.Entities.Semester", null)
                        .WithMany("Classes")
                        .HasForeignKey("SemesterId");
                });

            modelBuilder.Entity("School.Domain.Entities.Lecture", b =>
                {
                    b.HasOne("School.Domain.Entities.Subject", null)
                        .WithMany("Lectures")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("School.Domain.Entities.Subject", b =>
                {
                    b.HasOne("School.Domain.Entities.Class", null)
                        .WithMany("Subjects")
                        .HasForeignKey("ClassId");
                });

            modelBuilder.Entity("School.Domain.Entities.User", b =>
                {
                    b.HasOne("School.Domain.Entities.Class", null)
                        .WithMany("Students")
                        .HasForeignKey("ClassIdStudent");

                    b.HasOne("School.Domain.Entities.Class", null)
                        .WithMany("Teachers")
                        .HasForeignKey("ClassIdTeacher");

                    b.HasOne("School.Domain.Entities.Lecture", null)
                        .WithMany("Teachers")
                        .HasForeignKey("LectureId");

                    b.OwnsMany("School.Domain.ValueObjects.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime?>("ExpirationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("SemesterUser", b =>
                {
                    b.HasOne("School.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("SemesterResponsiblesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("School.Domain.Entities.Semester", null)
                        .WithMany()
                        .HasForeignKey("SemestersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("School.Domain.Entities.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("School.Domain.Entities.Lecture", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("School.Domain.Entities.Semester", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("School.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("School.Domain.Entities.User", b =>
                {
                    b.Navigation("AccountClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
