// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Module.ExitSlip.Infrastructure.DbContexts;

#nullable disable

namespace Module.ExitSlip.Infrastructure.Migrations
{
    [DbContext(typeof(ExitSlipDbContext))]
    [Migration("20250105084735_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ExitSlipModule")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Module.ExitSlip.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Text", "Module.ExitSlip.Domain.Entities.Answer.Text#Text", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", "ExitSlipModule");
                });

            modelBuilder.Entity("Module.ExitSlip.Domain.Entities.ExitSlip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("LectureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("MaxQuestionCount", "Module.ExitSlip.Domain.Entities.ExitSlip.MaxQuestionCount#MaxQuestionCount", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "Module.ExitSlip.Domain.Entities.ExitSlip.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("ExitSlips", "ExitSlipModule");
                });

            modelBuilder.Entity("Module.ExitSlip.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExitSlipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.ComplexProperty<Dictionary<string, object>>("Text", "Module.ExitSlip.Domain.Entities.Question.Text#Text", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ExitSlipId");

                    b.ToTable("Questions", "ExitSlipModule");
                });

            modelBuilder.Entity("Module.ExitSlip.Domain.Entities.Answer", b =>
                {
                    b.HasOne("Module.ExitSlip.Domain.Entities.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("Module.ExitSlip.Domain.Entities.Question", b =>
                {
                    b.HasOne("Module.ExitSlip.Domain.Entities.ExitSlip", null)
                        .WithMany("Questions")
                        .HasForeignKey("ExitSlipId");
                });

            modelBuilder.Entity("Module.ExitSlip.Domain.Entities.ExitSlip", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Module.ExitSlip.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
