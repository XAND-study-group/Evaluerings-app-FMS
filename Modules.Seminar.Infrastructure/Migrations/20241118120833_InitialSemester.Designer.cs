// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Module.Semester.Infrastructure.DbContexts;

#nullable disable

namespace Module.Semester.Infrastructure.Migrations
{
    [DbContext(typeof(SemesterDbContext))]
    [Migration("20241118120833_InitialSemester")]
    partial class InitialSemester
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Module.Semester.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Module.Semester.Domain.Entities.Class.Description#Text", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("StudentCapacity", "Module.Semester.Domain.Entities.Class.StudentCapacity#StudentCapacity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("ClassRoom", "Module.Semester.Domain.Entities.Lecture.ClassRoom#ClassRoom", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Module.Semester.Domain.Entities.Lecture.Description#Text", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("LectureDate", "Module.Semester.Domain.Entities.Lecture.LectureDate#LectureDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TimePeriod", "Module.Semester.Domain.Entities.Lecture.TimePeriod#TimePeriod", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("time");

                            b1.Property<TimeOnly>("From")
                                .HasColumnType("time");

                            b1.Property<TimeOnly>("To")
                                .HasColumnType("time");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "Module.Semester.Domain.Entities.Lecture.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("School")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("EducationRange", "Module.Semester.Domain.Entities.Semester.EducationRange#EducationRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("End")
                                .HasColumnType("date");

                            b1.Property<DateOnly>("Start")
                                .HasColumnType("date");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Module.Semester.Domain.Entities.Semester.Name#SemesterName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("SemesterNumber", "Module.Semester.Domain.Entities.Semester.SemesterNumber#SemesterNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassIdStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassIdTeacher")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LectureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassIdStudent");

                    b.HasIndex("ClassIdTeacher");

                    b.HasIndex("LectureId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SemesterUser", b =>
                {
                    b.Property<Guid>("SemesterResponsiblesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SemestersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SemesterResponsiblesId", "SemestersId");

                    b.HasIndex("SemestersId");

                    b.ToTable("SemesterUser");
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.Class", b =>
                {
                    b.HasOne("Module.Semester.Domain.Entities.Semester", null)
                        .WithMany("Classes")
                        .HasForeignKey("SemesterId");
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.Lecture", b =>
                {
                    b.HasOne("Module.Semester.Domain.Entities.Subject", null)
                        .WithMany("Lectures")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.Subject", b =>
                {
                    b.HasOne("Module.Semester.Domain.Entities.Class", null)
                        .WithMany("Subjects")
                        .HasForeignKey("ClassId");
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.User", b =>
                {
                    b.HasOne("Module.Semester.Domain.Entities.Class", null)
                        .WithMany("Students")
                        .HasForeignKey("ClassIdStudent");

                    b.HasOne("Module.Semester.Domain.Entities.Class", null)
                        .WithMany("Teachers")
                        .HasForeignKey("ClassIdTeacher");

                    b.HasOne("Module.Semester.Domain.Entities.Lecture", null)
                        .WithMany("Teachers")
                        .HasForeignKey("LectureId");
                });

            modelBuilder.Entity("SemesterUser", b =>
                {
                    b.HasOne("Module.Semester.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("SemesterResponsiblesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Semester.Domain.Entities.Semester", null)
                        .WithMany()
                        .HasForeignKey("SemestersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.Lecture", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.Semester", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Module.Semester.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Lectures");
                });
#pragma warning restore 612, 618
        }
    }
}
